[project]
name = "auth-service"
version = "0.1.0"
description = ""
authors = [
    {name = "Abramov Evgeniy",email = "61637662+iriswolf@users.noreply.github.com"}
]
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "black (>=25.1.0,<26.0.0)",
    "isort (>=6.0.1,<7.0.0)",
    "ruff (>=0.11.7,<0.12.0)",
    "mypy (>=1.15.0,<2.0.0)",
]

[tool.ruff]
line-length = 88
target-version = "py39"
src = ["app", "tests"]
exclude = [
    ".git",
    "build",
    "dist",
    "__pycache__",
    "*.pyc",
    "venv",
    ".venv",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle (ошибки форматирования)
    "F",    # pyflakes (ошибки выполнения)
    "W",    # pycodestyle (предупреждения)
    "C90",  # mccabe (сложность кода)
    "I",    # isort (порядок импортов)
    "N",    # pep8-naming (правила именования)
    "D",    # pydocstyle (докстринги)
    "UP",   # pyupgrade (обновление кода под новую версию Python)
    "YTT",  # проверка устаревших конструкций
    "B",    # flake8-bugbear (потенциальные баги)
    "A",    # flake8-builtins (конфликты с встроенными именами)
    "C4",   # flake8-comprehensions (оптимизация генераторов)
    "T20",  # flake8-print (запрещённый вывод print)
    "RET",  # flake8-return (ошибки в логике return)
    "SIM",  # flake8-simplify (упрощение кода)
    "ARG",  # flake8-unused-arguments (неиспользуемые аргументы функций)
    "PL",   # pylint совместимость
]
ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D401",  # First line should be in imperative mood
]

# Максимальная допустимая сложность функции
[tool.ruff.lint.mccabe]
max-complexity = 10

# Порядок импортов
[tool.ruff.lint.isort]
known-first-party = ["app"]
force-single-line = false

# Игнорировать длинные строки только в определённых местах (если хочется)
[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"]  # В тестах игнорируем докстринги
"__init__.py" = ["F401"]  # Разрешаем неиспользуемые импорты в __init__.py


[tool.poetry.group.test.dependencies]
pytest = "^8.3.5"
pytest-html = "^4.1.1"
pytest-asyncio = "^0.26.0"
pytest-lazy-fixture = "^0.6.3"
pytest-mock = "^3.14.0"
pytest-mypy = "^1.0.1"
pytest-cov = "^6.1.1"
httpx = "^0.28.1"
anyio = "^4.9.0"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py313']
exclude = '''
(
    \.eggs
  | \.git
  | \.tox
  | build
  | dist
  | .venv
  | docs
  | migrations
  | __pychache__
)
'''

[tool.isort]
profile = "black"

[tool.mypy]
python_version = "3.13"
plugins = []
strict = true  # Включает все строгие правила типизации
pretty = true  # Красивый вывод ошибок
show_error_codes = true  # Показывать коды ошибок для поиска в документации
warn_unused_configs = true  # Предупреждение об ошибках в конфиге
warn_return_any = true  # Предупреждать о возвращении any
warn_unused_ignores = true  # Предупреждать о ненужных ignore
warn_redundant_casts = true  # Ловить ненужные приведения типов
disallow_untyped_defs = true  # Требовать типы для всех функций
disallow_incomplete_defs = true  # Даже частичные типы запрещены
check_untyped_defs = true  # Проверять функции без аннотаций
no_implicit_optional = true  # Явно указывать Optional
disallow_any_generics = true  # Запретить использование обобщённых any
disallow_subclassing_any = true  # Запретить наследование от any
namespace_packages = true  # Для поддержки namespace пакетов
follow_imports_for_stubs = true  # Для сторонних библиотек
show_absolute_path = true  # Полные пути в ошибках

[tool.pytest.ini_options]
testpaths = [
    "tests",
]
addopts = "-ra --strict-markers --tb=short"  # -ra: показать короткие отчеты об упавших тестах, strict-markers: запрещать незарегистрированные маркеры, tb=short: короткий traceback
asyncio_mode = "auto"  # Позволяет pytest-asyncio автоматически работать с async def тестами
filterwarnings = [
    "error",  # Все предупреждения превращаем в ошибки
    "ignore::pytest.PytestUnraisableExceptionWarning",  # Игнорируем варны от pytest на падении asyncio тасков
]
